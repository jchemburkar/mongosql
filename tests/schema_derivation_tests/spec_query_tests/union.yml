%YAML 1.2
---
catalog_schema: {mydb: {foo: {bsonType: object, additionalProperties: true}, bar: {
      bsonType: object, additionalProperties: true}}}

tests:
- description: collections with different schema can be unioned
  current_db: mydb
  query: SELECT * FROM foo AS foo UNION ALL SELECT * FROM bar AS bar
  ordered: false
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          b: {bsonType: int}
          c: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, b, c]
        additionalProperties: false
      foo:
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
    required: [_id]
    additionalProperties: false
- description: basic union all correctness test
  current_db: mydb
  query: "SELECT VALUE {'a': a} FROM foo UNION ALL SELECT VALUE {'a': a} FROM foo"
  ordered: false
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: union works with array datasources
  current_db: mydb
  query: "SELECT VALUE {'a': a} FROM foo AS foo UNION ALL SELECT * FROM [{'b': 1},
    {'b': 2}] AS arr"
  ordered: false
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      arr:
        bsonType: object
        properties:
          b: {bsonType: int}
        required: [b]
        additionalProperties: false
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
    required: [_id]
    additionalProperties: false
