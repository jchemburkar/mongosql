catalog_schema:
  {
    'mydb': {
      'foo': {
        'bsonType': 'object',
        'additionalProperties': true,
      },
      'bar': {
        'bsonType': 'object',
        'additionalProperties': true,
      }
    }
  }
tests:
- description: collections with different schema can be unioned
  current_db: mydb
  "pipeline": [
    {
      "$project": {
        "foo": "$$ROOT", 
        "_id": 0
      }
    }, 
    {
      "$unionWith": {
        "coll": "bar", 
        "pipeline": [
          {
            "$project": {
              "_id": 0, 
              "bar": "$$ROOT"
            }
          }
        ]
      }
    }
  ]
  ordered: false
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          b: {bsonType: int}
          c: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, b, c]
        additionalProperties: false
      foo:
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
    required: [_id]
    additionalProperties: false
- description: basic union all correctness test
  current_db: mydb
  "pipeline": [
    {
      "$project": {
        "foo": "$$ROOT", 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "__bot": {
          "a": "$foo.a"
        }, 
        "_id": 0
      }
    }, 
    {
      "$unionWith": {
        "coll": "foo", 
        "pipeline": [
          {
            "$project": {
              "foo": "$$ROOT", 
              "_id": 0
            }
          }, 
          {
            "$project": {
              "__bot": {
                "a": "$foo.a"
              }, 
              "_id": 0
            }
          }
        ]
      }
    }, 
    {
      "$replaceWith": {
        "$unsetField": {
          "field": "__bot", 
          "input": {
            "$setField": {
              "field": "", 
              "value": "$__bot", 
              "input": "$$ROOT"
            }
          }
        }
      }
    }
  ]
  ordered: false
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: union works with array datasources
  current_db: mydb
  "pipeline": [
    {
      "$project": {
        "foo": "$$ROOT", 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "__bot": {
          "a": "$foo.a"
        }, 
        "_id": 0
      }
    }, 
    {
      "$unionWith": {
        "pipeline": [
          {
            "$documents": [
              {
                "b": {
                  "$literal": 1
                }
              }, 
              {
                "b": {
                  "$literal": 2
                }
              }
            ]
          }, 
          {
            "$project": {
              "arr": "$$ROOT", 
              "_id": 0
            }
          }
        ]
      }
    }, 
    {
      "$replaceWith": {
        "$unsetField": {
          "field": "__bot", 
          "input": {
            "$setField": {
              "field": "", 
              "value": "$__bot", 
              "input": "$$ROOT"
            }
          }
        }
      }
    }
  ]
  ordered: false
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      arr:
        bsonType: object
        properties:
          b: {bsonType: int}
        required: [b]
        additionalProperties: false
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
    required: [_id]
    additionalProperties: false
