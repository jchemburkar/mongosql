catalog_schema:
  {
    'test': {
      'foo': {
        'bsonType': 'object',
        'additionalProperties': true,
      },
      'bar': {
        'bsonType': 'object',
        'additionalProperties': true,
      }
    }
  }

tests:
- description: both unqualified and qualified references to derived table datasource fields are allowed
  current_db: test
  "pipeline": [
    {
      "$documents": [
        {
          "a": {
            "$literal": 1
          }, 
          "b": {
            "$literal": 1
          }
        }
      ]
    }, 
    {
      "$project": {
        "arr": "$$ROOT", 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "__bot": {
          "bsub": "$arr.b", 
          "asub": "$arr.a"
        }, 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "_id": 0, 
        "derived": "$__bot"
      }
    }, 
    {
      "$project": {
        "__bot": {
          "bsub": "$derived.bsub", 
          "asub": "$derived.asub"
        }, 
        "_id": 0
      }
    }, 
    {
      "$replaceWith": {
        "$unsetField": {
          "field": "__bot", 
          "input": {
            "$setField": {
              "field": "", 
              "value": "$__bot", 
              "input": "$$ROOT"
            }
          }
        }
      }
    }
  ]
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          asub: {bsonType: int}
          bsub: {bsonType: int}
        required: [asub, bsub]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: there is no ambiguity with one schema-less datasource in a derived table
  current_db: test
  "pipeline": [
    {
      "$project": {
        "foo": "$$ROOT", 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "_id": 0, 
        "derived": "$foo"
      }
    }
  ]
  result_set_schema:
    bsonType: object
    properties:
      derived:
        bsonType: object
        properties:
          _id: {bsonType: int}
          x: {bsonType: int}
          y: {bsonType: int}
        required: [_id, x, y]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, derived]
    additionalProperties: false
- description: derived table merges namespaces under alias namespace
  current_db: test
  "pipeline": [
    {
      "$documents": [
        {
          "a": {
            "$literal": 1
          }
        }
      ]
    }, 
    {
      "$project": {
        "foo": "$$ROOT", 
        "_id": 0
      }
    }, 
    {
      "$lookup": {
        "pipeline": [
          {
            "$documents": [
              {
                "b": {
                  "$literal": 2
                }
              }
            ]
          }, 
          {
            "$project": {
              "_id": 0, 
              "bar": "$$ROOT"
            }
          }
        ], 
        "as": "eca58228-b657-498a-b76e-f48a9161a404"
      }
    }, 
    {
      "$unwind": {
        "path": "$eca58228-b657-498a-b76e-f48a9161a404"
      }
    }, 
    {
      "$replaceWith": {
        "$mergeObjects": [
          "$$ROOT", 
          "$eca58228-b657-498a-b76e-f48a9161a404"
        ]
      }
    }, 
    {
      "$project": {
        "eca58228-b657-498a-b76e-f48a9161a404": 0, 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "foo": "$foo", 
        "bar": "$bar", 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "_id": 0, 
        "derived": {
          "$mergeObjects": [
            "$bar", 
            "$foo"
          ]
        }
      }
    }
  ]
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      derived:
        bsonType: object
        properties:
          b: {bsonType: int}
          a: {bsonType: int}
        required: [a, b]
        additionalProperties: false
    required: [_id, derived]
    additionalProperties: false
