%YAML 1.2
---
catalog_schema: {db: {foo: {bsonType: object, required: [_id, a, b], additionalProperties: false,
      properties: {_id: {bsonType: int}, a: {bsonType: int}, b: {bsonType: int}, c: {
          bsonType: bool}, d: {bsonType: string}, e: {bsonType: 'null'}}}, bar: {
      bsonType: object, required: [_id, a, b], additionalProperties: false, properties: {
        _id: {bsonType: int}, a: {bsonType: int}, b: {bsonType: int}, c: {bsonType: int}}},
    documents: {bsonType: object, required: [_id, doc], additionalProperties: false,
      properties: {_id: {bsonType: int}, doc: {bsonType: object, required: [a, b],
          properties: {a: {bsonType: int}, b: {bsonType: int}, c: {bsonType: int}}}}},
    arrays: {bsonType: object, required: [_id, arr], additionalProperties: false,
      properties: {_id: {bsonType: int}, arr: {bsonType: array, items: {bsonType: int}}}}}}

tests:
- description: SELECT DISTINCT * ensures unique rows for entire document
  query: SELECT DISTINCT * FROM db.foo
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      foo:
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: int}
          d: {bsonType: string}
          e: {bsonType: 'null'}
          _id: {bsonType: int}
          c: {bsonType: bool}
        required: [_id, a, b]
        additionalProperties: false
    required: [_id, foo]
    additionalProperties: false
- description: SELECT DISTINCT in nested subquery omitting _id selects unique rows
  query: |
    SELECT *
      FROM (
        SELECT DISTINCT *
        FROM (
          SELECT a, b, c
          FROM db.foo
        ) AS t1
      ) AS t2
  result:
  - {t2: {a: 1, b: 2}}
  - {t2: {a: 2, b: 2}}
  - {t2: {a: 2, b: 2, c: true}}

- description: SELECT DISTINCT * on joined tables unique rows for entire document
  query: SELECT DISTINCT * FROM db.foo,db.bar WHERE foo._id = bar._id
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: int}
          c: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
      foo:
        bsonType: object
        properties:
          b: {bsonType: int}
          c: {bsonType: bool}
          _id: {bsonType: int}
          a: {bsonType: int}
          d: {bsonType: string}
          e: {bsonType: 'null'}
        required: [_id, a, b]
        additionalProperties: false
    required: [_id, bar, foo]
    additionalProperties: false
- description: SELECT DISTINCT specific columns from joined tables
  query: SELECT DISTINCT foo.a, bar.b FROM db.foo, db.bar WHERE foo._id = bar._id
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b: {bsonType: int}
          a: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SELECT DISTINCT columns ensures we see unique values
  query: SELECT DISTINCT a, b FROM db.foo
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b: {bsonType: int}
          a: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SELECT DISTINCT columns with alias
  query: SELECT DISTINCT a as col1, b as col2 FROM db.foo
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          col2: {bsonType: int}
          col1: {bsonType: int}
        required: [col1, col2]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: SELECT DISTINCT document column of repeated documents
  query: SELECT DISTINCT doc FROM db.documents
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          doc:
            bsonType: object
            properties:
              b: {bsonType: int}
              c: {bsonType: int}
              a: {bsonType: int}
            required: [a, b]
            additionalProperties: false
        required: [doc]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SELECT DISTINCT arr checking deduplication of repeated arrays
  query: SELECT DISTINCT arr FROM db.arrays
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          arr:
            bsonType: array
            items: {bsonType: int}
        required: [arr]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: SELECT DISTINCT with ORDER BY
  query: SELECT DISTINCT a FROM db.foo ORDER BY a ASC
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: basic UNION distinct correctness test
  current_db: db
  query: "SELECT VALUE {'a': a} FROM foo UNION SELECT VALUE {'a': a} FROM foo"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: duplicates are still removed when collections with different schema
    are unioned
  current_db: db
  query: "SELECT VALUE {'a': a} FROM foo AS foo UNION SELECT VALUE {'b': b, 'c': c}
    FROM bar AS bar"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: int}
          c: {bsonType: int}
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: UNION is left associative
  current_db: db
  query: "SELECT VALUE {'a': a} FROM foo UNION ALL SELECT VALUE {'a': a} FROM foo
    UNION SELECT VALUE {'a': a} FROM foo"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: UNION distinct with select * in both queries
  current_db: db
  query: |
    SELECT * FROM (SELECT a,b,c FROM foo) AS foo 
    UNION 
    SELECT * FROM (SELECT a,b,c FROM bar) AS bar
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          a: {bsonType: int}
          c: {bsonType: bool}
          b: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          c: {bsonType: int}
          b: {bsonType: int}
          a: {bsonType: int}
        required: [a, b]
        additionalProperties: false
    required: [_id]
    additionalProperties: false
- description: UNION distinct with same value order
  current_db: db
  query: SELECT a,b FROM foo UNION SELECT a,b FROM bar
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: UNION distinct with mixed value order
  current_db: db
  query: SELECT a,b FROM foo UNION SELECT b,a FROM bar
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b: {bsonType: int}
          a: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: UNION distinct with mixed star and values select list
  current_db: db
  query: SELECT * FROM foo UNION SELECT a,b from bar
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          e: {bsonType: 'null'}
          b: {bsonType: int}
          d: {bsonType: string}
          c: {bsonType: bool}
          _id: {bsonType: int}
          a: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id]
    additionalProperties: false
- description: UNION distinct with join
  current_db: db
  query: |
    SELECT *
    FROM 
      (SELECT a, b FROM foo) AS foo, 
      (SELECT a, b FROM bar) AS bar
    UNION 
    SELECT a, b FROM bar
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: int}
        required: [a, b]
        additionalProperties: false
      bar:
        bsonType: object
        properties:
          b: {bsonType: int}
          a: {bsonType: int}
        required: [a, b]
        additionalProperties: false
    required: [_id]
    additionalProperties: false
