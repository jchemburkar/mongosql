%YAML 1.2
---
catalog_schema: {mydb: {biz: {bsonType: object, required: [_id, foo], additionalProperties: false,
      properties: {_id: {bsonType: int}, foo: {bsonType: int}}}, bar: {bsonType: object,
      required: [_id, foo], additionalProperties: false, properties: {_id: {bsonType: int},
        foo: {bsonType: int}, baz: {bsonType: int}}}, baz: {bsonType: object, required: [
        bar, car], additionalProperties: false, properties: {_id: {bsonType: int},
        bar: {bsonType: int}, car: {bsonType: int}}}}}

tests:
- description: WITH clause simple query
  current_db: mydb
  query: WITH t as (SELECT foo from biz) (SELECT * from t)
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      t:
        bsonType: object
        properties:
          foo: {bsonType: int}
        required: [foo]
        additionalProperties: false
    required: [_id, t]
    additionalProperties: false
- description: WITH clause join query
  current_db: mydb
  query: WITH t as (SELECT foo, bar, car from biz JOIN baz ON biz._id = baz._id) (SELECT
    * from t)
  result_set_schema:
    bsonType: object
    properties:
      t:
        bsonType: object
        properties:
          foo: {bsonType: int}
          bar: {bsonType: int}
          car: {bsonType: int}
        required: [bar, car, foo]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, t]
    additionalProperties: false
- description: WITH clause multiple derived with a join
  current_db: mydb
  query: WITH t as (SELECT _id, foo from biz), u as (SELECT _id, bar, car from baz)
    (SELECT * from t JOIN u ON t._id = u._id)
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      t:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      u:
        bsonType: object
        properties:
          _id: {bsonType: int}
          car: {bsonType: int}
          bar: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
    required: [_id, t, u]
    additionalProperties: false
- description: WITH clause filters
  current_db: mydb
  query: WITH t as (SELECT foo from biz WHERE foo > 1), u as (SELECT baz from bar
    where baz > 1) (SELECT t.foo, u.baz from t, u)
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          baz: {bsonType: int}
          foo: {bsonType: int}
        required: [baz, foo]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
