%YAML 1.2
---
catalog_schema: {foo: {unary: {bsonType: object, required: [_id, a], additionalProperties: false,
      properties: {_id: {bsonType: int}, a: {anyOf: [bsonType: bool, bsonType: !!str "null"]}}},
    binary: {bsonType: object, required: [_id, a, b], additionalProperties: false,
      properties: {_id: {bsonType: int}, a: {anyOf: [bsonType: bool, bsonType: !!str "null"]},
        b: {anyOf: [bsonType: bool, bsonType: !!str "null"]}}}}}

tests:
- description: NOT correctness test
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'not_a': NOT a } FROM unary AS unary"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          not_a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [not_a]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: AND correctness test
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'a_and_b': a AND b } FROM binary AS binary"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a_and_b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [a_and_b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: OR correctness test
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'a_or_b': a OR b } FROM binary AS binary"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a_or_b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [a_or_b]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
