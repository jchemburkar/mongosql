catalog_schema:
  {
    'mydb': {
      'foo': {
        'bsonType': 'object',
        'additionalProperties': true
      },
      'bar': {
        'bsonType': 'object',
        'required': [ '_id', 'a', 'b' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': 'int'
          },
          'a': {
            'bsonType': 'int'
          },
          'b': {
            'bsonType': 'object',
            'properties': {
              'c': {
                'bsonType': 'int'
              }
            }
          },
        }
      },
      'nullAndMissing': {
        'bsonType': "object",
        'required': [ 'a' ],
        'additionalProperties': false,
        'properties': {
          'a': {
            'bsonType': !!str "null"
          },
        }
      },
      'nullAndNonNull': {
        'bsonType': 'object',
        'additionalProperies': true
      },
      "baz":
        {
          "bsonType": "object",
          "required": [ "_id", "a", "b", "coll" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
              "a": { "bsonType": "int" },
              "b": { "bsonType": "int" },
              "coll": { "bsonType": "string" },
            },
        },
      "local":
        {
          "bsonType": "object",
          "required": [ "_id" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
            },
        },
      "foreign":
        {
          "bsonType": "object",
          "required": [ "_id", "l_id", "x" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
              "l_id": { "bsonType": "int" },
              "x": { "bsonType": "int" },
            },
        },
      "car":
        {
          "bsonType": "object",
          "required": [ "_id", "s" ],
          "additionalProperties": false,
          "properties":
            {
              "_id": { "bsonType": "int" },
              "s": { "bsonType": "string" },
            },
        },
    }
  }

tests:
- description: ascending-sort correctness test
  current_db: mydb
  pipeline:
  - $project:
      foo: $$ROOT
      _id: 0
  - $project:
      __bot:
        a: $foo.a
      _id: 0
  - $sort:
      __bot.a: 1
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: descending-sort correctness test
  current_db: mydb
  pipeline:
  - $project:
      foo: $$ROOT
      _id: 0
  - $project:
      __bot:
        a: $foo.a
      _id: 0
  - $sort:
      __bot.a: -1
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: multiple-sort-key correctness test
  current_db: mydb
  pipeline:
  - $project:
      foo: $$ROOT
      _id: 0
  - $project:
      __bot:
        a: $foo.a
        b: $foo.b
      _id: 0
  - $sort:
      __bot.a: 1
      __bot.b: 1
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: string}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: missing sorts before null
  current_db: mydb
  pipeline:
  - $sort:
      a: 1
  - $project:
      nullAndMissing: $$ROOT
      _id: 0
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      nullAndMissing:
        bsonType: object
        properties:
          a: {bsonType: 'null'}
          _id: {bsonType: int}
        required: [_id]
        additionalProperties: false
    required: [_id, nullAndMissing]
    additionalProperties: false
- description: null sorts before non-null values
  current_db: mydb
  pipeline:
  - $project:
      nullAndNonNull: $$ROOT
      _id: 0
  - $project:
      __bot:
        a: $nullAndNonNull.a
      _id: 0
  - $sort:
      __bot.a: 1
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
        required: [a]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: column references in sort keys can be qualified with table name after
    select star
  current_db: mydb
  pipeline:
  - $sort:
      a: 1
  - $project:
      bar: $$ROOT
      _id: 0
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
        required: [_id, a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar]
    additionalProperties: false
- description: column references in sort keys can be qualified with table name after
    select substar
  current_db: mydb
  pipeline:
  - $sort:
      a: 1
  - $project:
      bar: $$ROOT
      _id: 0
  - $project:
      bar: $bar
      _id: 0
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar]
    additionalProperties: false
- description: column references in sort keys can be compound identifiers referencing
    document subfields
  current_db: mydb
  pipeline:
  - $sort:
      b.c: 1
  - $project:
      bar: $$ROOT
      _id: 0
  - $project:
      __bot:
        b: $bar.b
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
        required: [b]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: column references in sort keys can be compound identifiers referencing
    document subfields and be qualified with table name
  current_db: mydb
  pipeline:
  - $sort:
      b.c: 1
  - $project:
      bar: $$ROOT
      _id: 0
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
          _id: {bsonType: int}
          a: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
    required: [_id, bar]
    additionalProperties: false
- description: allow qualified order by fields in ORDER BY because some BI tools require
    this even though it is not correct SQL92
  current_db: mydb
  pipeline:
  - $project:
      bar: $$ROOT
      _id: 0
  - $addFields:
      __bot:
        a: $bar.a
        _id: $bar._id
  - $sort:
      bar.a: 1
      __bot._id: 1
  - $project:
      __bot:
        a: $bar.a
        _id: $bar._id
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false

- description: allowing ordering by column not in Select still supports ordering by
    computed column
  current_db: mydb
  pipeline:
  - $project:
      baz: $$ROOT
      _id: 0
  - $addFields:
      __bot:
        _id: $baz._id
        a: $baz.a
        c:
          $add:
          - $literal: 42
          - $baz.b
  - $sort:
      baz.b: 1
      __bot.c: 1
  - $project:
      __bot:
        _id: $baz._id
        a: $baz.a
        c:
          $add:
          - $literal: 42
          - $baz.b
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
          c: {bsonType: int}
        required: [_id, a, c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: allow ordering by column not in Select
  current_db: mydb
  pipeline:
  - $project:
      baz: $$ROOT
      _id: 0
  - $addFields:
      __bot:
        _id: $baz._id
        a: $baz.a
  - $sort:
      baz.b: 1
  - $project:
      __bot:
        _id: $baz._id
        a: $baz.a
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: ordering by column in select list that shadows column from data sources
    still works
  current_db: mydb
  pipeline:
  - $sort:
      a: 1
  - $project:
      baz: $$ROOT
      _id: 0
  - $project:
      __bot:
        _id: $baz._id
        a: $baz.a
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: ordering by column not in Select in join works when qualified
  current_db: mydb
  pipeline:
  - $project:
      a: $$ROOT
      _id: 0
  - $lookup:
      from: baz
    pipeline:
      - $project:
          b: $$ROOT
          _id: 0
      as: eca58228-b657-498a-b76e-f48a9161a404
  - $unwind:
      path: $eca58228-b657-498a-b76e-f48a9161a404
  - $replaceWith:
      $mergeObjects:
      - $$ROOT
      - $eca58228-b657-498a-b76e-f48a9161a404
  - $project:
      _id: 0
      eca58228-b657-498a-b76e-f48a9161a404: 0
  - $addFields:
      __bot:
        _id: $b._id
        a: $a.a
        c:
          $add:
          - $literal: 42
          - $b.b
  - $sort:
      a.b: 1
      __bot.c: 1
  - $project:
      __bot:
        _id: $b._id
        a: $a.a
        c:
          $add:
          - $literal: 42
          - $b.b
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
          c: {bsonType: int}
        required: [_id, a, c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: allow ordering by column not in Select even with group by
  current_db: mydb
  pipeline:
  - $group:
      _id:
        __unaliasedKey1: $a
        __unaliasedKey2: $b
  - $project:
      baz:
        a: $_id.__unaliasedKey1
        b: $_id.__unaliasedKey2
      _id: 0
  - $project:
      baz: $baz
      _id: 0
  - $addFields:
      __bot:
        a: $baz.a
        c:
          $add:
          - $literal: 42
          - $baz.b
  - $sort:
      baz.b: 1
      __bot.c: 1
  - $project:
      __bot:
        a: $baz.a
        c:
          $add:
          - $literal: 42
          - $baz.b
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c: {bsonType: int}
          a: {bsonType: int}
        required: [a, c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: Sorting by column from RHS of LEFT JOIN orders the entire result set
  current_db: mydb
  pipeline:
  - $project:
      l: $$ROOT
      _id: 0
  - $lookup:
      from: foreign
      localField: l._id
      foreignField: l_id
      as: f
  - $unwind:
      path: $f
      preserveNullAndEmptyArrays: true
  - $addFields:
      __bot:
        _id: $l._id
        x: $f.x
  - $sort:
      __bot.x: 1
      l._id: 1
  - $project:
      __bot:
        _id: $l._id
        x: $f.x
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          x: {bsonType: int}
          _id: {bsonType: int}
        required: [_id]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: Sorting by column from RHS of INNER JOIN orders the entire result set
  current_db: mydb
  "pipeline": [
    {
      "$project": {
        "_id": 0, 
        "l": "$$ROOT"
      }
    }, 
    {
      "$lookup": {
        "foreignField": "l_id", 
        "as": "f", 
        "from": "foreign", 
        "localField": "l._id"
      }
    }, 
    {
      "$unwind": {
        "path": "$f"
      }
    }, 
    {
      "$sort": {
        "f.x": 1
      }
    }, 
    {
      "$project": {
        "__bot": {
          "x": "$f.x", 
          "_id": "$l._id"
        }, 
        "_id": 0
      }
    }, 
    {
      "$replaceWith": {
        "$unsetField": {
          "field": "__bot", 
          "input": {
            "$setField": {
              "field": "", 
              "value": "$__bot", 
              "input": "$$ROOT"
            }
          }
        }
      }
    }
  ]
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          x: {bsonType: int}
        required: [_id, x]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: ensure ORDER BY does not introduce extraneous columns
  current_db: mydb
  "pipeline": [
    {
      "$group": {
        "_id": {
          "__unaliasedKey1": "$s"
        }, 
        "_agg1": {
          "$sum": {
            "$cond": [
              {
                "$in": [
                  {
                    "$type": [
                      "$s"
                    ]
                  }, 
                  [
                    {
                      "$literal": "missing"
                    }, 
                    {
                      "$literal": "null"
                    }
                  ]
                ]
              }, 
              {
                "$literal": 0
              }, 
              {
                "$literal": 1
              }
            ]
          }
        }
      }
    }, 
    {
      "$project": {
        "__bot": {
          "_agg1": "$_agg1"
        }, 
        "car": {
          "s": "$_id.__unaliasedKey1"
        }, 
        "_id": 0
      }
    }, 
    {
      "$sort": {
        "car.s": 1
      }
    }, 
    {
      "$project": {
        "__bot": "$__bot", 
        "car": "$car", 
        "_id": 0
      }
    }, 
    {
      "$project": {
        "__bot": {
          "alias2": "$car.s", 
          "alias1": "$__bot._agg1"
        }, 
        "_id": 0
      }
    }, 
    {
      "$replaceWith": {
        "$unsetField": {
          "field": "__bot", 
          "input": {
            "$setField": {
              "field": "", 
              "value": "$__bot", 
              "input": "$$ROOT"
            }
          }
        }
      }
    }
  ]
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          alias1: {bsonType: int}
          alias2: {bsonType: string}
        required: [alias1, alias2]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
