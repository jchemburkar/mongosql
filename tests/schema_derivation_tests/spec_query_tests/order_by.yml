%YAML 1.2
---
catalog_schema: {mydb: {foo: {bsonType: object, additionalProperties: true}, bar: {
      bsonType: object, required: [_id, a, b], additionalProperties: false, properties: {
        _id: {bsonType: int}, a: {bsonType: int}, b: {bsonType: object, properties: {
            c: {bsonType: int}}}}}, nullAndMissing: {bsonType: object, required: [
        a], additionalProperties: false, properties: {a: {bsonType: !!str "null"}}},
    nullAndNonNull: {bsonType: object, additionalProperies: true}, baz: {bsonType: object,
      required: [_id, a, b, coll], additionalProperties: false, properties: {_id: {
          bsonType: int}, a: {bsonType: int}, b: {bsonType: int}, coll: {bsonType: string}}},
    local: {bsonType: object, required: [_id], additionalProperties: false, properties: {
        _id: {bsonType: int}}}, foreign: {bsonType: object, required: [_id, l_id,
        x], additionalProperties: false, properties: {_id: {bsonType: int}, l_id: {
          bsonType: int}, x: {bsonType: int}}}, car: {bsonType: object, required: [
        _id, s], additionalProperties: false, properties: {_id: {bsonType: int}, s: {
          bsonType: string}}}}}

tests:
- description: ascending-sort correctness test
  current_db: mydb
  query: "SELECT VALUE {'a': a::!INT} FROM foo AS foo ORDER BY a ASC"
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: descending-sort correctness test
  current_db: mydb
  query: "SELECT VALUE {'a': a::!INT} FROM foo AS foo ORDER BY a DESC"
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: multiple-sort-key correctness test
  current_db: mydb
  query: "SELECT VALUE {'a': a::!INT, 'b': b::!STRING} FROM foo AS foo ORDER BY a
    ASC, b ASC"
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          b: {bsonType: string}
        required: [a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: missing sorts before null
  current_db: mydb
  query: SELECT * FROM nullAndMissing AS nullAndMissing ORDER BY a ASC
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      nullAndMissing:
        bsonType: object
        properties:
          a: {bsonType: 'null'}
          _id: {bsonType: int}
        required: [_id]
        additionalProperties: false
    required: [_id, nullAndMissing]
    additionalProperties: false
- description: null sorts before non-null values
  current_db: mydb
  query: "SELECT VALUE {'a': a::!INT} FROM nullAndNonNull AS nullAndNonNull ORDER
    BY a ASC"
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
        required: [a]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: column references in sort keys can be qualified with table name after
    select star
  current_db: mydb
  query: SELECT * FROM bar AS bar ORDER BY bar.a ASC
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
        required: [_id, a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar]
    additionalProperties: false
- description: column references in sort keys can be qualified with table name after
    select substar
  current_db: mydb
  query: SELECT VALUE bar.* FROM bar AS bar ORDER BY bar.a ASC
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar]
    additionalProperties: false
- description: column references in sort keys can be compound identifiers referencing
    document subfields
  current_db: mydb
  query: "SELECT VALUE {'b': b} FROM bar AS bar ORDER BY b.c ASC"
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
        required: [b]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: column references in sort keys can be compound identifiers referencing
    document subfields and be qualified with table name
  current_db: mydb
  query: SELECT * FROM bar AS bar ORDER BY bar.b.c ASC
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
          _id: {bsonType: int}
          a: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
    required: [_id, bar]
    additionalProperties: false
- description: allow qualified order by fields in ORDER BY because some BI tools require
    this even though it is not correct SQL92
  current_db: mydb
  query: SELECT a, _id FROM bar AS bar ORDER BY bar.a ASC, _id
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: qualified order by fields in ORDER BY select the proper data source
    where there are multiple datasources in scope
  current_db: mydb
  query: SELECT * FROM bar AS a JOIN bar AS b ORDER BY a.a ASC
  ordered: true
  skip_reason: SQL-2405
  result:
  - {a: {_id: 2, a: 1, b: {c: 2}}, b: {_id: 2, a: 1, b: {c: 2}}}
  - {a: {_id: 2, a: 1, b: {c: 2}}, b: {_id: 1, a: 2, b: {c: 3}}}
  - {a: {_id: 2, a: 1, b: {c: 2}}, b: {_id: 0, a: 3, b: {c: 1}}}
  - {a: {_id: 1, a: 2, b: {c: 3}}, b: {_id: 2, a: 1, b: {c: 2}}}
  - {a: {_id: 1, a: 2, b: {c: 3}}, b: {_id: 1, a: 2, b: {c: 3}}}
  - {a: {_id: 1, a: 2, b: {c: 3}}, b: {_id: 0, a: 3, b: {c: 1}}}
  - {a: {_id: 0, a: 3, b: {c: 1}}, b: {_id: 2, a: 1, b: {c: 2}}}
  - {a: {_id: 0, a: 3, b: {c: 1}}, b: {_id: 1, a: 2, b: {c: 3}}}
  - {a: {_id: 0, a: 3, b: {c: 1}}, b: {_id: 0, a: 3, b: {c: 1}}}

- description: allowing ordering by column not in Select still supports ordering by
    computed column
  current_db: mydb
  query: SELECT _id, a, b + 42 as c from baz order by b, c
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
          c: {bsonType: int}
        required: [_id, a, c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: allow ordering by column not in Select
  current_db: mydb
  query: SELECT _id, a from baz order by b
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: ordering by column in select list that shadows column from data sources
    still works
  current_db: mydb
  query: SELECT _id, a from baz order by a
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: ordering by column not in Select in join works when qualified
  current_db: mydb
  query: SELECT b._id, a.a, b.b + 42 as c from baz a join baz b order by a.b, c
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          a: {bsonType: int}
          c: {bsonType: int}
        required: [_id, a, c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: allow ordering by column not in Select even with group by
  current_db: mydb
  query: SELECT a, b + 42 as c from baz group by a, b order by b, c
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c: {bsonType: int}
          a: {bsonType: int}
        required: [a, c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: Sorting by column from RHS of LEFT JOIN orders the entire result set
  current_db: mydb
  query: SELECT l._id, f.x FROM local AS l LEFT JOIN foreign AS f ON l._id = f.l_id
    ORDER BY x, l._id ASC
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          x: {bsonType: int}
          _id: {bsonType: int}
        required: [_id]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: Sorting by column from RHS of INNER JOIN orders the entire result set
  current_db: mydb
  query: SELECT l._id, f.x FROM local AS l JOIN foreign AS f ON l._id = f.l_id ORDER
    BY x ASC
  ordered: true
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          _id: {bsonType: int}
          x: {bsonType: int}
        required: [_id, x]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: ensure ORDER BY does not introduce extraneous columns
  current_db: mydb
  query: SELECT COUNT(s) AS alias1, s AS alias2 FROM car GROUP BY s ORDER BY alias2
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          alias1: {bsonType: int}
          alias2: {bsonType: string}
        required: [alias1, alias2]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
