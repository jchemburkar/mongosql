%YAML 1.2
---
catalog_schema: {mydb: {bar: {bsonType: object, required: [foo], additionalProperties: false,
      properties: {_id: {bsonType: int}, foo: {bsonType: int}}}, bar2: {bsonType: object,
      required: [foo], additionalProperties: false, properties: {_id: {bsonType: int},
        foo: {bsonType: int}, baz: {bsonType: int}}}, coll: {bsonType: object, required: [
        bar, car], additionalProperties: false, properties: {bar: {bsonType: int},
        car: {bsonType: int}}}}, db2: {foo: {bsonType: object, required: [x], additionalProperties: false,
      properties: {x: {bsonType: int}}}}}

tests:
- description: cross join correctness test
  current_db: mydb
  query: SELECT * FROM bar AS bar CROSS JOIN coll AS coll
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      coll:
        bsonType: object
        properties:
          bar: {bsonType: int}
          car: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar, coll]
    additionalProperties: false
- description: inner join correctness test
  current_db: mydb
  query: SELECT * FROM bar AS bar INNER JOIN coll AS coll ON bar.foo = coll.car
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      coll:
        bsonType: object
        properties:
          _id: {bsonType: int}
          car: {bsonType: int}
          bar: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar, coll]
    additionalProperties: false
- description: left join correctness test
  current_db: mydb
  query: SELECT * from bar2 AS bar2 LEFT JOIN bar AS bar on bar2.foo = bar.foo
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      bar2:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
          baz: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
    required: [_id, bar2]
    additionalProperties: false
- description: right join correctness test
  current_db: mydb
  query: SELECT * from bar2 AS bar2 RIGHT JOIN bar as bar ON bar2.foo = bar.foo
  result_set_schema:
    bsonType: object
    properties:
      bar2:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
          baz: {bsonType: int}
        required: [_id, baz, foo]
        additionalProperties: false
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
    required: [_id, bar]
    additionalProperties: false
- description: join predicates can contain complex expressions
  current_db: mydb
  query: SELECT * FROM bar AS bar INNER JOIN bar2 AS bar2 ON bar.foo + 50 > bar2.baz
  result_set_schema:
    bsonType: object
    properties:
      bar2:
        bsonType: object
        properties:
          baz: {bsonType: int}
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, baz, foo]
        additionalProperties: false
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
    required: [_id, bar, bar2]
    additionalProperties: false
- description: join predicates can reference columns by table-qualified names
  current_db: mydb
  query: SELECT * FROM bar AS bar INNER JOIN coll AS coll ON bar.foo = coll.car
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      coll:
        bsonType: object
        properties:
          car: {bsonType: int}
          bar: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar, coll]
    additionalProperties: false
- description: join predicates can reference columns by unambiguous unqualified names
  current_db: mydb
  query: SELECT * FROM bar AS bar INNER JOIN coll AS coll ON foo = car
  result_set_schema:
    bsonType: object
    properties:
      coll:
        bsonType: object
        properties:
          bar: {bsonType: int}
          car: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
    required: [_id, bar, coll]
    additionalProperties: false
- description: joins are left-associative
  current_db: mydb
  query: SELECT * FROM bar AS a CROSS JOIN bar AS b LEFT JOIN bar AS c ON a.foo =
    c.foo
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      c:
        bsonType: object
        properties:
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      b:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      a:
        bsonType: object
        properties:
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
    required: [_id, a, b, c]
    additionalProperties: false
- description: join left and right datasources can be referenced by alias
  current_db: mydb
  query: SELECT t1.*, t2.* FROM bar AS t1 INNER JOIN coll AS t2
  result_set_schema:
    bsonType: object
    properties:
      t2:
        bsonType: object
        properties:
          bar: {bsonType: int}
          _id: {bsonType: int}
          car: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
      _id: {bsonType: objectId}
      t1:
        bsonType: object
        properties:
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
    required: [_id, t1, t2]
    additionalProperties: false
- description: cross database join correctness test
  current_db: mydb
  query: SELECT * FROM coll AS coll CROSS JOIN db2.foo AS foo
  skip_reason: 'SQL-540: cross-database lookups are not supported'
  result:
  - {coll: {_id: 0, bar: 53, car: 42}, foo: {_id: 0, x: 1}}

- description: left join with static value comparison to rhs field in ON clause still
    results in left hand side doc when condition fails
  current_db: mydb
  query: SELECT * FROM bar LEFT JOIN bar2 ON bar._id = bar2._id AND bar2.baz = 63
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      _id: {bsonType: objectId}
      bar2:
        bsonType: object
        properties:
          foo: {bsonType: int}
          _id: {bsonType: int}
          baz: {bsonType: int}
        required: [_id, baz, foo]
        additionalProperties: false
    required: [_id, bar]
    additionalProperties: false
- description: left join followed by WHERE with static comparison on rhs value filters
    out left hand side docs that do not match the WHERE
  current_db: mydb
  query: SELECT * FROM bar LEFT JOIN bar2 ON bar._id = bar2._id WHERE bar2.baz = 63
  result_set_schema:
    bsonType: object
    properties:
      bar:
        bsonType: object
        properties:
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      _id: {bsonType: objectId}
      bar2:
        bsonType: object
        properties:
          foo: {bsonType: int}
          _id: {bsonType: int}
          baz: {bsonType: int}
        required: [_id, baz, foo]
        additionalProperties: false
    required: [_id, bar, bar2]
    additionalProperties: false
- description: match filter in left join correctness test
  current_db: mydb
  query: SELECT * FROM bar LEFT JOIN bar2 ON bar._id = bar2._id WHERE bar2.baz IS
    INT
  result_set_schema:
    bsonType: object
    properties:
      bar2:
        bsonType: object
        properties:
          _id: {bsonType: int}
          baz: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, baz, foo]
        additionalProperties: false
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, bar, bar2]
    additionalProperties: false
- description: filter in lateral join correctness test
  current_db: mydb
  query: SELECT * FROM bar LEFT JOIN bar2 ON bar._id = bar2._id AND bar2.baz = 63
    WHERE bar2.baz IS NOT MISSING
  result_set_schema:
    bsonType: object
    properties:
      bar2:
        bsonType: object
        properties:
          baz: {bsonType: int}
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, baz, foo]
        additionalProperties: false
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          _id: {bsonType: int}
          foo: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
    required: [_id, bar, bar2]
    additionalProperties: false
- description: match filter in lateral join correctness test
  current_db: mydb
  query: SELECT * FROM bar LEFT JOIN bar2 ON bar._id = bar2._id AND bar2.baz = 63
    WHERE bar2.baz IS INT
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      bar:
        bsonType: object
        properties:
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, foo]
        additionalProperties: false
      bar2:
        bsonType: object
        properties:
          baz: {bsonType: int}
          foo: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, baz, foo]
        additionalProperties: false
    required: [_id, bar, bar2]
    additionalProperties: false
