catalog_schema:
  {
    'foo': {
      'coll': {
        'bsonType': 'object',
        'additionalProperties': true
      },
      'nested': {
        'bsonType': 'object',
        'additionalProperties': true
      },
      'bar': {
        'bsonType': 'object',
        'properties': {a: {bsonType: 'int'}},
        'additionalProperties': true
      },
      'baz': {
        'bsonType': 'object',
        'properties': {a: {bsonType: 'int'}},
        'additionalProperties': true
      },
      'schema_coll': {
        'bsonType': "object",
        'required': [ 'bar', 'car' ],
        'additionalProperties': false,
        'properties': {
          'bar': {
            'bsonType': "int"
          },
          'car': {
            'bsonType': "int"
          }
        }
      },
      'schema_foo': {
        'bsonType': "object",
        'required': [ 'baz' ],
        'additionalProperties': false,
        'properties': {
          'baz': {
            'bsonType': "int"
          }
        }
      }
    },
    'foo2': {
      'coll': {
        'bsonType': 'object',
        'additionalProperties': true
      },
    }
  }

tests:
- description: compound collection references are fully qualified
  current_db: foo
  pipeline:
  - $project:
      coll: $$ROOT
      _id: 0
  result_set_schema:
    bsonType: object
    properties:
      coll:
        bsonType: object
        properties:
          bar: {bsonType: int}
          car: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, coll]
    additionalProperties: false
- description: equivalent qualified and unqualified references to the same field
  current_db: foo
  pipeline:
  - $project:
      coll: $$ROOT
      _id: 0
  - $project:
      __bot:
        ubar: $coll.bar
        qbar: $coll.bar
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          ubar: {bsonType: int}
          qbar: {bsonType: int}
        required: [qbar, ubar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: compound field references prefer qualified names to field references
  current_db: foo
  pipeline:
  - $project:
      n: $$ROOT
      _id: 0
  - $project:
      __bot:
        a: $n.a
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties: {}
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: compound field reference is treated as unqualified if no datasource
    name matches first identifier
  current_db: foo
  pipeline:
  - $project:
      nested: $$ROOT
      _id: 0
  - $project:
      __bot:
        a: $nested.n.a
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: field references never resolve to the catalog environment
  current_db: foo
  pipeline:
  - $project:
      coll: $$ROOT
      _id: 0
  - $project:
      __bot:
        a: $coll.foo.coll
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties: {}
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: qualified reference is not ambiguous with multiple datasources
  current_db: foo
  pipeline:
  - $project:
      coll: $$ROOT
      _id: 0
  - $lookup:
      from: nested
      pipeline:
      - $project:
          nested: $$ROOT
          _id: 0
      as: eca58228-b657-498a-b76e-f48a9161a404
  - $unwind:
      path: $eca58228-b657-498a-b76e-f48a9161a404
  - $replaceWith:
      $mergeObjects:
      - $$ROOT
      - $eca58228-b657-498a-b76e-f48a9161a404
  - $project:
      _id: 0
      eca58228-b657-498a-b76e-f48a9161a404: 0
  - $project:
      __bot:
        a: $coll.bar
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: unqualified references are not ambiguous when there are multiple datasources
    with schema that disambiguates
  current_db: foo
  pipeline:
  - $project:
      coll: $$ROOT
      _id: 0
  - $lookup:
      from: schema_foo
      pipeline:
      - $project:
          coll2: $$ROOT
          _id: 0
      as: eca58228-b657-498a-b76e-f48a9161a404
  - $unwind:
      path: $eca58228-b657-498a-b76e-f48a9161a404
  - $replaceWith:
      $mergeObjects:
      - $$ROOT
      - $eca58228-b657-498a-b76e-f48a9161a404
  - $project:
      _id: 0
      eca58228-b657-498a-b76e-f48a9161a404: 0
  - $project:
      __bot:
        a: $coll.bar
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: unqualified collection reference refers to current database
  current_db: foo2
  pipeline:
  - $project:
      coll: $$ROOT
      _id: 0
  result_set_schema:
    bsonType: object
    properties:
      coll:
        bsonType: object
        properties:
          b: {bsonType: int}
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, coll]
    additionalProperties: false
- description: c.a refers to a in baz.a in the subquery and bar.a in the outer query
  current_db: foo
  pipeline:
  - $project:
      c: $$ROOT
      _id: 0
  - $lookup:
      from: baz
      let:
        vc_0: $c
      pipeline:
      - $project:
          c: $$ROOT
          _id: 0
      - $project:
          __bot:
            a: $c.a
          _id: 0
      as: __subquery_result_0
  - $match:
      $expr:
        $reduce:
          input: $__subquery_result_0
          initialValue:
            $literal: false
          in:
            $let:
              vars:
                desugared_sqlOr_input0: $$value
                desugared_sqlOr_input1:
                  $let:
                    vars:
                      desugared_sqlEq_input0: $c.a
                      desugared_sqlEq_input1: $$this.__bot.a
                    in:
                      $cond:
                      - $or:
                        - $lte:
                          - $$desugared_sqlEq_input0
                          - $literal: null
                        - $lte:
                          - $$desugared_sqlEq_input1
                          - $literal: null
                      - $literal: null
                      - $eq:
                        - $$desugared_sqlEq_input0
                        - $$desugared_sqlEq_input1
              in:
                $cond:
                - $or:
                  - $eq:
                    - $$desugared_sqlOr_input0
                    - $literal: true
                  - $eq:
                    - $$desugared_sqlOr_input1
                    - $literal: true
                - $literal: true
                - $cond:
                  - $or:
                    - $lte:
                      - $$desugared_sqlOr_input0
                      - $literal: null
                    - $lte:
                      - $$desugared_sqlOr_input1
                      - $literal: null
                  - $literal: null
                  - $literal: false
  - $project:
      __subquery_result_0: 0
      _id: 0
  result_set_schema:
    bsonType: object
    properties:
      c:
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, c]
    additionalProperties: false
- description: if an unqualified reference CANNOT be from subquery's datasource and
    MUST be from outer query's datasource, use outer query's datasource
  current_db: foo
  pipeline:
  - $project:
      q: $$ROOT
      _id: 0
  - $lookup:
      from: schema_foo
      let:
        vq_0: $q
      pipeline:
      - $limit: 1
      - $project:
          q: $$ROOT
          _id: 0
      - $project:
          __bot:
            bar: $$vq_0.bar
          _id: 0
      as: __subquery_result_0
  - $project:
      __bot:
        bar:
          $let:
            vars:
              docExpr:
                $arrayElemAt:
                - $__subquery_result_0
                - $literal: 0
            in: $$docExpr.__bot.bar
      _id: 0
  - $project:
      __subquery_result_0: 0
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference CANNOT be from subquery's datasource and
    MAY be from outer query's datasource, use outer query's datasource
  current_db: foo
  pipeline:
  - $project:
      q: $$ROOT
      _id: 0
  - $lookup:
      from: schema_foo
      let:
        vq_0: $q
      pipeline:
      - $limit: 1
      - $project:
          q: $$ROOT
          _id: 0
      - $project:
          __bot:
            bar: $$vq_0.bar
          _id: 0
      as: __subquery_result_0
  - $project:
      __bot:
        bar:
          $let:
            vars:
              docExpr:
                $arrayElemAt:
                - $__subquery_result_0
                - $literal: 0
            in: $$docExpr.__bot.bar
      _id: 0
  - $project:
      __subquery_result_0: 0
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MAY be from subquery's datasource and CANNOT
    be from outer query's datasource, use subquery's datasource
  current_db: foo
  pipeline:
  - $project:
      q: $$ROOT
      _id: 0
  - $lookup:
      from: baz
      let:
        vq_0: $q
      pipeline:
      - $limit: 1
      - $project:
          q: $$ROOT
          _id: 0
      - $project:
          __bot:
            bar: $q.bar
          _id: 0
      as: __subquery_result_0
  - $project:
      __bot:
        bar:
          $let:
            vars:
              docExpr:
                $arrayElemAt:
                - $__subquery_result_0
                - $literal: 0
            in: $$docExpr.__bot.bar
      _id: 0
  - $project:
      __subquery_result_0: 0
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties: {}
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MUST be from subquery's datasource and
    MUST be from outer query's datasource, the highest scope number is chosen
  current_db: foo
  pipeline:
  - $project:
      q: $$ROOT
      _id: 0
  - $lookup:
      from: schema_coll
      let:
        vq_0: $q
      pipeline:
      - $limit: 1
      - $project:
          q: $$ROOT
          _id: 0
      - $project:
          __bot:
            bar: $q.bar
          _id: 0
      as: __subquery_result_0
  - $project:
      __bot:
        bar:
          $let:
            vars:
              docExpr:
                $arrayElemAt:
                - $__subquery_result_0
                - $literal: 0
            in: $$docExpr.__bot.bar
      _id: 0
  - $project:
      __subquery_result_0: 0
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MUST be from subquery's datasource and
    MAY be from outer query's datasource, use subquery's datasource
  current_db: foo
  pipeline:
  - $project:
      q: $$ROOT
      _id: 0
  - $lookup:
      from: schema_coll
      let:
        vq_0: $q
      pipeline:
      - $limit: 1
      - $project:
          q: $$ROOT
          _id: 0
      - $project:
          __bot:
            bar: $q.bar
          _id: 0
      as: __subquery_result_0
  - $project:
      __bot:
        bar:
          $let:
            vars:
              docExpr:
                $arrayElemAt:
                - $__subquery_result_0
                - $literal: 0
            in: $$docExpr.__bot.bar
      _id: 0
  - $project:
      __subquery_result_0: 0
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MUST be from subquery's datasource and
    CANNOT be from outer query's datasource, use subquery's datasource
  current_db: foo
  pipeline:
  - $project:
      q: $$ROOT
      _id: 0
  - $lookup:
      from: schema_coll
      let:
        vq_0: $q
      pipeline:
      - $limit: 1
      - $project:
          q: $$ROOT
          _id: 0
      - $project:
          __bot:
            bar: $q.bar
          _id: 0
      as: __subquery_result_0
  - $project:
      __bot:
        bar:
          $let:
            vars:
              docExpr:
                $arrayElemAt:
                - $__subquery_result_0
                - $literal: 0
            in: $$docExpr.__bot.bar
      _id: 0
  - $project:
      __subquery_result_0: 0
      _id: 0
  - $replaceWith:
      $unsetField:
        field: __bot
        input:
          $setField:
            field: ''
            input: $$ROOT
            value: $__bot
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
