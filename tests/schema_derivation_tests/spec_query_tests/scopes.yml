%YAML 1.2
---
catalog_schema: {foo: {coll: {bsonType: object, additionalProperties: true}, nested: {
      bsonType: object, additionalProperties: true}, bar: {bsonType: object, properties: {
        a: {bsonType: int}}, additionalProperties: true}, baz: {bsonType: object,
      properties: {a: {bsonType: int}}, additionalProperties: true}, schema_coll: {
      bsonType: object, required: [bar, car], additionalProperties: false, properties: {
        bar: {bsonType: int}, car: {bsonType: int}}}, schema_foo: {bsonType: object,
      required: [baz], additionalProperties: false, properties: {baz: {bsonType: int}}}},
  foo2: {coll: {bsonType: object, additionalProperties: true}}}

tests:
- description: compound collection references are fully qualified
  current_db: foo
  query: SELECT * FROM foo.coll AS coll
  result_set_schema:
    bsonType: object
    properties:
      coll:
        bsonType: object
        properties:
          bar: {bsonType: int}
          car: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, bar, car]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, coll]
    additionalProperties: false
- description: equivalent qualified and unqualified references to the same field
  current_db: foo
  query: "SELECT VALUE {'ubar': bar, 'qbar': coll.bar} FROM foo.coll AS coll"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          ubar: {bsonType: int}
          qbar: {bsonType: int}
        required: [qbar, ubar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: compound field references prefer qualified names to field references
  current_db: foo
  query: "SELECT VALUE {'a': n.a} FROM nested AS n"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties: {}
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: compound field reference is treated as unqualified if no datasource
    name matches first identifier
  current_db: foo
  query: "SELECT VALUE {'a': n.a} FROM nested AS nested"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: field references never resolve to the catalog environment
  current_db: foo
  query: "SELECT VALUE {'a': foo.coll} FROM foo.coll AS coll"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties: {}
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: qualified reference is not ambiguous with multiple datasources
  current_db: foo
  query: "SELECT VALUE {'a': coll.bar} FROM foo.coll AS coll JOIN foo.nested AS nested"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: unqualified references are not ambiguous when there are multiple datasources
    with schema that disambiguates
  current_db: foo
  query: "SELECT VALUE {'a': bar} FROM foo.schema_coll AS coll JOIN foo.schema_foo
    AS coll2"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: int}
        required: [a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: unqualified collection reference refers to current database
  current_db: foo2
  query: SELECT * FROM coll AS coll
  result_set_schema:
    bsonType: object
    properties:
      coll:
        bsonType: object
        properties:
          b: {bsonType: int}
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a, b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, coll]
    additionalProperties: false
- description: c.a refers to a in baz.a in the subquery and bar.a in the outer query
  current_db: foo
  query: SELECT * FROM bar AS c WHERE c.a IN (SELECT c.a FROM baz AS c)
  result_set_schema:
    bsonType: object
    properties:
      c:
        bsonType: object
        properties:
          a: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, c]
    additionalProperties: false
- description: if an unqualified reference CANNOT be from subquery's datasource and
    MUST be from outer query's datasource, use outer query's datasource
  current_db: foo
  query: "SELECT VALUE{'bar': (SELECT bar FROM schema_foo AS q LIMIT 1)} FROM schema_coll
    AS q"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference CANNOT be from subquery's datasource and
    MAY be from outer query's datasource, use outer query's datasource
  current_db: foo
  query: "SELECT VALUE{'bar': (SELECT bar FROM schema_foo AS q LIMIT 1)} FROM coll
    AS q"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MAY be from subquery's datasource and CANNOT
    be from outer query's datasource, use subquery's datasource
  current_db: foo
  query: "SELECT VALUE{'bar': (SELECT bar FROM baz AS q LIMIT 1)} FROM schema_foo
    AS q"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties: {}
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MUST be from subquery's datasource and
    MUST be from outer query's datasource, the highest scope number is chosen
  current_db: foo
  query: "SELECT VALUE{'bar': (SELECT bar FROM schema_coll AS q LIMIT 1)} FROM schema_coll
    AS q"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MUST be from subquery's datasource and
    MAY be from outer query's datasource, use subquery's datasource
  current_db: foo
  query: "SELECT VALUE{'bar': (SELECT bar FROM schema_coll AS q LIMIT 1)} FROM coll
    AS q"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: if an unqualified reference MUST be from subquery's datasource and
    CANNOT be from outer query's datasource, use subquery's datasource
  current_db: foo
  query: "SELECT VALUE{'bar': (SELECT bar FROM schema_coll AS q LIMIT 1)} FROM schema_foo
    AS q"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          bar: {bsonType: int}
        required: [bar]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
