catalog_schema:
  {
    'db': {
      'and_or_tier': {
        'bsonType': 'object',
        'required': [ '_id', 'a', 'b', 'c' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': 'int'
          },
          'a': { 'bsonType': 'bool' },
          'b': { 'bsonType': 'bool' },
          'c': { 'bsonType': 'bool' }
        }
      },
      'not_and_tier': {
        'bsonType': 'object',
        'required': [ '_id', 'a', 'b' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': 'int'
          },
          'a': { 'bsonType': 'bool' },
          'b': {
            'anyOf': [
              { 'bsonType': 'bool' },
              { 'bsonType': !!str "null" }
            ]
          }
        }
      },
      'mul_add_tier': {
        'bsonType': 'object',
        'required': [ '_id', 'a', 'b', 'c' ],
        'additionalProperties': false,
        'properties': {
          '_id': {
            'bsonType': 'int'
          },
          'a': { 'bsonType': 'int' },
          'b': { 'bsonType': 'int' },
          'c': { 'bsonType': 'int' }
        }
      },
      'subpath_type_tier': {
        'bsonType': 'object',
        'additionalProperties': true
      }
    }
  }

tests:
  # The expression
  #
  #   a AND b OR c
  #
  # is parsed as
  #
  #   (a AND b) OR c
  #
  # not as
  #
  #   a AND (b OR c)
  - description: AND binds tighter than OR
    current_db: db
    query: "SELECT VALUE {'a': a, 'b': b, 'c': c, 'v': a AND b OR c, 'alt': a AND (b OR c)} FROM and_or_tier AS coll"
    result:
      - {'': {'a': false, 'b': true, 'c': true, 'v': true, 'alt': false}}
      - {'': {'a': false, 'b': false, 'c': true, 'v': true, 'alt': false}}

  # The expression
  #
  #   NOT a AND b
  #
  # is parsed as
  #
  #   (NOT a) AND b
  #
  # not as
  #
  #   NOT (a AND b)
  - description: NOT binds tighter than AND
    current_db: db
    query: "SELECT VALUE {'a': a, 'b': b, 'v': NOT a AND b, 'alt': NOT (a AND b)} FROM not_and_tier AS coll"
    result:
      - {'': {'a': true, 'b': false, 'v': false, 'alt': true}}
      - {'': {'a': true, 'b': null, 'v': false, 'alt': null}}
      - {'': {'a': false, 'b': null, 'v': null, 'alt': true}}

  # The expression
  #
  #   NOT a IS <type>
  #
  # is parsed as
  #
  #   NOT (a IS <type>)
  #
  # not as
  #
  #   (NOT a) IS <type>
  - description: IS binds tighter than NOT
    current_db: db
    query: "SELECT VALUE {'a': a, 'v': NOT a IS BOOL, 'alt': (NOT a) IS BOOL} FROM [{'a': true}, {'a': null}] AS arr"
    result:
      - {'': {'a': true, 'v': false, 'alt': true}}
      - {'': {'a': null, 'v': true, 'alt': false}}

  # The expression
  #
  #   a LIKE b IS <type>
  #
  # is parsed as
  #
  #   (a LIKE b) IS <type>
  #
  # not as
  #
  #   a LIKE (b IS <type>)
  - description: LIKE binds tighter than IS
    current_db: db
    query: "SELECT VALUE {'a': a, 'b': b, 'v': a LIKE b IS NULL} FROM [{'a': 'str', 'b': 'str'}, {'a': 'str', 'b': null}] AS arr"
    skip_reason: "SQL-330: Update $like desugarer to work for non-literal patterns"
    result:
      - {'': {'a': 'str', 'b': 'str', 'v': false}}
      - {'': {'a': 'str', 'b': null, 'v': true}}

  # The expression
  #
  #   a BETWEEN b AND c IN <tuple>
  #
  # is parsed as
  #
  #   (a BETWEEN b AND c) IN <tuple>
  #
  # not as
  #
  #   a BETWEEN b AND (c IN <tuple>)
  #
  # This test breaks the convention of using "core syntax" in the query field.
  # <expr> IN <tuple> is syntactically rewritten to <expr> = ANY <subquery> in
  # the "core syntax". Here, though, we leave IN in the query intentionally to
  # show precedence behavior.
  - description: BETWEEN binds tighter than IN
    current_db: db
    query: "SELECT VALUE {'a': a, 'v': a BETWEEN 0 AND 2 IN (true)} FROM [{'a': 1}, {'a': 3}] AS arr"
    result:
      - {'': {'a': 1, 'v': true}}
      - {'': {'a': 3, 'v': false}}

  # The expression
  #
  #   a || b <comp op> c
  #
  # is parsed as
  #
  #   (a || b) <comp op> c
  #
  # not as
  #
  #   a || (b <comp op> c)
  - description: "|| binds tighter than comparison ops"
    current_db: db
    query: "SELECT VALUE {'a': a, 'b': b, 'c': c, 'v': a || b = c} FROM [{'a': 'a', 'b': 'b', 'c': 'ab'}] AS arr"
    result:
      - {'': {'a': 'a', 'b': 'b', 'c': 'ab', 'v': true}}

  # The expression
  #
  #   a *// b +/- c
  #
  # is parsed as
  #
  #   (a *// b) +/- c
  #
  # not as
  #
  #   a *// (b +/- c)
  - description: mul/div bind tighter than add/sub
    current_db: db
    query: "SELECT VALUE {'a': a, 'b': b, 'c': c, 'v': a * b + c, 'alt': a * (b + c)} FROM mul_add_tier AS coll"
    result:
      - {'': {'a': 1, 'b': 1, 'c': 1, 'v': 2, 'alt': 2}}
      - {'': {'a': 6, 'b': 3, 'c': 3, 'v': 21, 'alt': 36}}

  # The expression
  #
  #   +/- a *// b
  #
  # is parsed as
  #
  #   (+/- a) *// b
  #
  # not as
  #
  #   +/- (a *// b)
  - description: unary ops bind tighter than mul/div
    current_db: db
    query: "SELECT VALUE {'a': a, 'b': b, 'v': - a * b, 'alt': - (a * b)} FROM [{'a': -1, 'b': 1}] AS arr"
    result:
      - {'': {'a': { '$numberInt': '-1' }, 'b': 1, 'v': 1, 'alt': 1}}

  # The expression
  #
  #   a.b::/::!<type>
  #
  # is parsed as
  #
  #   (a.b)::/::!<type>
  #
  # not as
  #
  #   a.(b::/::!<type>)
  #
  # This test breaks the convention of using "core syntax" in the query field.
  # <expr>::<type> is syntactically rewritten to CAST(<expr> AS <type>) in the
  # "core syntax". Here, though, we leave :: in the query intentionally to
  # show precedence behavior.
  - description: subpath op binds tighter than type ops
    current_db: db
    query: "SELECT VALUE {'a': a, 'v': a.b::INT} FROM subpath_type_tier AS coll"
    result:
      - {'': {'a': {'b': true, 'c': 1}, 'v': 1}}
