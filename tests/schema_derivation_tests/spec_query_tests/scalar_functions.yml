%YAML 1.2
---
variables:
  numericTypes: &numericTypes
  - {bsonType: int}
  - {bsonType: long}
  - {bsonType: double}
  - {bsonType: decimal}
  - {bsonType: !!str "null"}

catalog_schema: {foo: {nullif: {bsonType: object, required: [_id, v1, v2], additionalProperties: false,
      properties: {_id: {bsonType: int}, v1: {anyOf: [bsonType: string, bsonType: !!str "null"]},
        v2: {anyOf: [bsonType: string, bsonType: !!str "null"]}}}, twoArgCoalesce: {
      bsonType: object, additionalProperties: true}, multiArgCoalesce: {bsonType: object,
      additionalProperties: true}, size: {bsonType: object, required: [_id, a], additionalProperties: false,
      properties: {_id: {bsonType: int}, a: {anyOf: [bsonType: array, bsonType: !!str "null"]}}},
    length: {bsonType: object, required: [_id, s], additionalProperties: false, properties: {
        _id: {bsonType: int}, s: {anyOf: [bsonType: string, bsonType: !!str "null"]},
        comment: {bsonType: string}}}, nullAndMissing: {bsonType: object, required: [
        _id, d], additionalProperties: false, properties: {_id: {bsonType: int}, d: {
          anyOf: [bsonType: date, bsonType: !!str "null"]}}}, substring: {bsonType: object,
      required: [_id, str, start, length], additionalProperties: false, properties: {
        _id: {bsonType: int}, str: {anyOf: [bsonType: string, bsonType: !!str "null"]},
        start: {anyOf: [bsonType: int, bsonType: !!str "null"]}, length: {anyOf: [
            bsonType: int, bsonType: !!str "null"]}}}, fold: {bsonType: object, required: [
        _id, s], additionalProperties: false, properties: {_id: {bsonType: int}, s: {
          anyOf: [bsonType: string, bsonType: !!str "null"]}}}, trim: {bsonType: object,
      required: [_id, substr, str], additionalProperties: false, properties: {_id: {
          bsonType: int}, substr: {anyOf: [bsonType: string, bsonType: !!str "null"]},
        str: {anyOf: [bsonType: string, bsonType: !!str "null"]}}}, position: {bsonType: object,
      required: [_id, s1, s2], additionalProperties: false, properties: {_id: {bsonType: int},
        s1: {anyOf: [bsonType: string, bsonType: !!str "null"]}, s2: {anyOf: [bsonType: string,
            bsonType: !!str "null"]}}}, abs: {bsonType: object, required: [_id, v],
      additionalProperties: false, properties: {_id: {bsonType: int}, v: {anyOf: *numericTypes}}},
    ceilAndFloor: {bsonType: object, required: [_id, v], additionalProperties: false,
      properties: {_id: {bsonType: int}, v: {anyOf: *numericTypes}}}, log: {bsonType: object,
      required: [_id, v, base], additionalProperties: false, properties: {_id: {bsonType: int},
        v: {anyOf: *numericTypes}, base: {anyOf: *numericTypes}}}, mod: {bsonType: object,
      required: [_id, v, divisor], additionalProperties: false, properties: {_id: {
          bsonType: int}, v: {anyOf: *numericTypes}, divisor: {anyOf: *numericTypes}}},
    pow: {bsonType: object, required: [_id, v, exponent], additionalProperties: false,
      properties: {_id: {bsonType: int}, v: {anyOf: *numericTypes}, exponent: {anyOf: *numericTypes}}},
    radians: {bsonType: object, required: [_id, degrees], additionalProperties: false,
      properties: {_id: {bsonType: int}, degrees: {anyOf: *numericTypes}}}, round: {
      bsonType: object, required: [_id, v, place], additionalProperties: false, properties: {
        _id: {bsonType: int}, v: {anyOf: *numericTypes}, place: {anyOf: [bsonType: int,
            bsonType: long, bsonType: !!str "null"]}}}, sqrt: {bsonType: object, required: [
        _id, v], additionalProperties: false, properties: {_id: {bsonType: int}, v: {
          anyOf: *numericTypes}}}, trigonometry: {bsonType: object, required: [_id,
        radians], additionalProperties: false, properties: {_id: {bsonType: int},
        radians: {anyOf: *numericTypes}}}, split: {bsonType: object, required: [_id,
        str, delim, tokenNum], additionalProperties: false, properties: {_id: {bsonType: int},
        str: {anyOf: [bsonType: string, bsonType: !!str "null"]}, delim: {anyOf: [
            bsonType: string, bsonType: !!str "null"]}, tokenNum: {anyOf: [bsonType: int,
            bsonType: !!str "null"]}}}, dates: {bsonType: object, required: [_id,
        interval, date1, date2], properties: {_id: {bsonType: int}, date1: {bsonType: date},
        date2: {bsonType: date}, interval: {anyOf: [bsonType: int, bsonType: long]}},
      additionalProperties: false}, datepart: {bsonType: object, required: [_id, date1],
      properties: {_id: {bsonType: int}, date1: {bsonType: date}}, additionalProperties: false}}}

tests:
- description: NULLIF correctness test
  current_db: foo
  query: "SELECT VALUE {'v1': v1, 'v2': v2, 'v': NULLIF(v1, v2)} FROM nullif AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          v2:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          v1:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: COALESCE(v1, v2) correctness tests
  current_db: foo
  query: "SELECT VALUE {'v1': v1, 'v2': v2, 'v': COALESCE(v1, v2)} FROM twoArgCoalesce
    AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          v2: {bsonType: int}
          v1:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
          v: {bsonType: int}
        required: [v, v2]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: COALESCE(v1, ..., vn) correctness tests
  current_db: foo
  query: "SELECT VALUE {'v1': v1, 'v2': v2, 'v3': v3, 'v4': v4, 'v5': v5, 'v': COALESCE(v1,
    v2, v3, v4, v5)} FROM multiArgCoalesce AS c"
  result:
  - {'': {v1: 123, v2: null, v4: 789, v5: null, v: 123}}
  - {'': {v1: null, v3: 456, v4: 789, v: 456}}
  - {'': {v2: null, v3: null, v5: 789, v: 789}}
  - {'': {v1: null, v2: null, v5: null, v: null}}

- description: SIZE correctness tests
  current_db: foo
  query: "SELECT VALUE {'a': a, 's': SIZE(a)} FROM size AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          s:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
        required: [s]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: POSITION correctness tests
  current_db: foo
  query: "SELECT VALUE {'s1': s1, 's2': s2, 'p': POSITION(s1 IN s2)} FROM `position`
    AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          p:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
          s1:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          s2:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [p]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: CHAR_LENGTH correctness tests
  current_db: foo
  query: "SELECT VALUE {'s': s, 'len': CHAR_LENGTH(s), 'comment': comment} FROM length
    AS c"
  result:
  - {'': {s: '', len: 0}}
  - {'': {s: a, len: 1}}
  - {'': {s: ã, len: 1}}
  - {'': {s: abc, len: 3}}
  - {'': {s: $€λG, len: 4, comment: € is encoded using three bytes. λ is encoded using
        two bytes.}}
  - {'': {s: 寿司, len: 2, comment: Each character is encoded using three bytes.}}
  - {'': {s: null, len: null}}
  - {'': {len: null}}

- description: OCTET_LENGTH correctness tests
  current_db: foo
  query: "SELECT VALUE {'s': s, 'len': OCTET_LENGTH(s), 'comment': comment} FROM length
    AS c"
  result:
  - {'': {s: '', len: 0}}
  - {'': {s: a, len: 1}}
  - {'': {s: ã, len: 2}}
  - {'': {s: abc, len: 3}}
  - {'': {s: $€λG, len: 7, comment: € is encoded using three bytes. λ is encoded using
        two bytes.}}
  - {'': {s: 寿司, len: 6, comment: Each character is encoded using three bytes.}}
  - {'': {s: null, len: null}}
  - {'': {len: null}}

- description: BIT_LENGTH correctness tests
  current_db: foo
  query: "SELECT VALUE {'s': s, 'len': BIT_LENGTH(s), 'comment': comment} FROM length
    AS c"
  result:
  - {'': {s: '', len: 0}}
  - {'': {s: a, len: 8}}
  - {'': {s: ã, len: 16}}
  - {'': {s: abc, len: 24}}
  - {'': {s: $€λG, len: 56, comment: € is encoded using three bytes. λ is encoded
        using two bytes.}}
  - {'': {s: 寿司, len: 48, comment: Each character is encoded using three bytes.}}
  - {'': {s: null, len: null}}
  - {'': {len: null}}

- description: EXTRACT FROM NULL and MISSING correctness test
  current_db: foo
  query: "SELECT VALUE {'d': d, 'v': EXTRACT(YEAR FROM d)} FROM nullAndMissing AS
    c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          v: {bsonType: 'null'}
          d: {bsonType: 'null'}
        required: [v]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SUBSTRING(str FROM start FOR length) correctness test
  current_db: foo
  query: "SELECT VALUE {'str': str, 'start': start, 'length': length, 'substr': SUBSTRING(str
    FROM start FOR length)} FROM `substring` AS c"
  skip_reason: 'SQL-428: negative length in $substrCP'
  result:
  - {'': {str: '', start: {$numberInt: '0'}, length: {$numberInt: '1'}, substr: ''}}
  - {'': {str: '', start: {$numberInt: '1'}, length: {$numberInt: '1'}, substr: ''}}
  - {'': {str: abc, start: {$numberInt: '0'}, length: {$numberInt: '-1'}, substr: abc}}
  - {'': {str: abc, start: {$numberInt: '0'}, length: {$numberInt: '0'}, substr: ''}}
  - {'': {str: abc, start: {$numberInt: '0'}, length: {$numberInt: '1'}, substr: a}}
  - {'': {str: abc, start: {$numberInt: '0'}, length: {$numberInt: '2'}, substr: ab}}
  - {'': {str: abc, start: {$numberInt: '0'}, length: {$numberInt: '4'}, substr: abc}}
  - {'': {str: abc, start: {$numberInt: '1'}, length: {$numberInt: '2'}, substr: bc}}
  - {'': {str: abc, start: {$numberInt: '2'}, length: {$numberInt: '-1'}, substr: c}}
  - {'': {str: $€λGx, start: {$numberInt: '1'}, length: {$numberInt: '3'}, substr: €λG}}
  - {'': {str: null, start: {$numberInt: '1'}, length: {$numberInt: '1'}, substr: null}}
  - {'': {start: {$numberInt: '1'}, length: {$numberInt: '1'}, substr: null}}
  - {'': {str: abc, start: null, length: {$numberInt: '1'}, substr: null}}
  - {'': {str: abc, length: {$numberInt: '1'}, substr: null}}
  - {'': {str: abc, start: {$numberInt: '1'}, length: null, substr: null}}
  - {'': {str: abc, start: {$numberInt: '1'}, substr: null}}

- description: REPLACE correctness test
  current_db: foo
  query: "SELECT VALUE {'s': s, 'v': REPLACE(s, 'c', 'fff')} FROM `fold` AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          s:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: UPPER correctness test
  current_db: foo
  query: "SELECT VALUE {'s': s, 'v': UPPER(s)} FROM `fold` AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          s:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: LOWER correctness test
  current_db: foo
  query: "SELECT VALUE {'s': s, 'v': LOWER(s)} FROM `fold` AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          s:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: TRIM(BOTH substr FROM str) correctness test
  current_db: foo
  query: "SELECT VALUE {'substr': substr, 'str': str, 'v': TRIM(BOTH substr FROM str)}
    FROM `trim` AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          substr:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          str:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: TRIM(LEADING substr FROM str) correctness test
  current_db: foo
  query: "SELECT VALUE {'substr': substr, 'str': str, 'v': TRIM(LEADING substr FROM
    str)} FROM `trim` AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          str:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          substr:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: TRIM(TRAILING substr FROM str) correctness test
  current_db: foo
  query: "SELECT VALUE {'substr': substr, 'str': str, 'v': TRIM(TRAILING substr FROM
    str)} FROM `trim` AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          substr:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          str:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: CURRENT_TIMESTAMP(p) correctness test
  current_db: foo
  query: "SELECT VALUE {'v': CURRENT_TIMESTAMP(1) > '2021-01-08T12:00:00Z'::TIMESTAMP}
    FROM [{}] AS _dual"
  result:
  - {'': {v: true}}

- description: Multiple CURRENT_TIMESTAMPs are equal across a query
  current_db: foo
  query: "SELECT VALUE {'v': CURRENT_TIMESTAMP(6) = CURRENT_TIMESTAMP(6)} FROM [{}]
    AS _dual"
  result:
  - {'': {v: true}}

- description: ABS correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'n': ABS(v)} FROM abs AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: CEIL correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'n': CEIL(v)} FROM ceilAndFloor AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: COS correctness tests
  current_db: foo
  query: "SELECT VALUE {'radians': radians, 'n': COS(radians)} FROM trigonometry AS
    c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: double}
            - {bsonType: decimal}
          radians:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: DEGREES correctness tests
  current_db: foo
  query: "SELECT VALUE {'radians': radians, 'n': DEGREES(radians)} FROM trigonometry
    AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: double}
            - {bsonType: decimal}
          radians:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: FLOOR correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'n': FLOOR(v)} FROM ceilAndFloor AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: LOG correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'base': base, 'n': LOG(v, base)} FROM log AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          base:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: double}
            - {bsonType: decimal}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: MOD correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'divisor': divisor, 'n': MOD(v, divisor)} FROM mod
    AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          divisor:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: POW correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'exponent': exponent, 'n': POW(v, exponent)} FROM
    pow AS c"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          exponent:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: RADIANS correctness tests
  current_db: foo
  query: "SELECT VALUE {'degrees': degrees, 'n': RADIANS(degrees)} FROM radians AS
    c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: double}
            - {bsonType: decimal}
          degrees:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: ROUND correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'place': place, 'n': ROUND(v, place)} FROM round AS
    c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          place:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SIN correctness tests
  current_db: foo
  query: "SELECT VALUE {'radians': radians, 'n': SIN(radians)} FROM trigonometry AS
    c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          radians:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SQRT correctness tests
  current_db: foo
  query: "SELECT VALUE {'v': v, 'n': SQRT(v)} FROM sqrt AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: TAN correctness tests
  current_db: foo
  query: "SELECT VALUE {'radians': radians, 'n': TAN(radians)} FROM trigonometry AS
    c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          radians:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          n:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [n]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SPLIT correctness tests
  current_db: foo
  query: "SELECT VALUE {'str': str, 'delim': delim, 'tokenNum': tokenNum, 'v': SPLIT(str,
    delim, tokenNum)} FROM split AS c"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          delim:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          str:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          tokenNum:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
          v:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [v]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: YEAR correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(YEAR, interval, date1),
    'datepart': EXTRACT(YEAR FROM date1), 'datediff': DATEDIFF(YEAR, date1, date2),
    'datetrunc': DATETRUNC(YEAR, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          dateadd: {bsonType: date}
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          datediff: {bsonType: long}
          datepart: {bsonType: int}
          datetrunc: {bsonType: date}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: MONTH correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(MONTH, interval,
    date1), 'datepart': EXTRACT(MONTH FROM date1), 'datediff': DATEDIFF(MONTH, date1,
    date2), 'datetrunc': DATETRUNC(MONTH, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          datetrunc: {bsonType: date}
          dateadd: {bsonType: date}
          datepart: {bsonType: int}
          datediff: {bsonType: long}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: DAY correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(DAY, interval, date1),
    'datepart': EXTRACT(DAY FROM date1), 'datediff': DATEDIFF(DAY, date1, date2),
    'datetrunc': DATETRUNC(DAY, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          datetrunc: {bsonType: date}
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          datepart: {bsonType: int}
          dateadd: {bsonType: date}
          datediff: {bsonType: long}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: HOUR correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(HOUR, interval, date1),
    'datepart': EXTRACT(HOUR FROM date1), 'datediff': DATEDIFF(HOUR, date1, date2),
    'datetrunc': DATETRUNC(HOUR, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          datetrunc: {bsonType: date}
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          dateadd: {bsonType: date}
          datepart: {bsonType: int}
          datediff: {bsonType: long}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: MINUTE correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(MINUTE, interval,
    date1), 'datepart': EXTRACT(MINUTE FROM date1), 'datediff': DATEDIFF(MINUTE, date1,
    date2), 'datetrunc': DATETRUNC(MINUTE, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          dateadd: {bsonType: date}
          datediff: {bsonType: long}
          datepart: {bsonType: int}
          datetrunc: {bsonType: date}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: SECOND correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(SECOND, interval,
    date1), 'datepart': EXTRACT(SECOND FROM date1), 'datediff': DATEDIFF(SECOND, date1,
    date2), 'datetrunc': DATETRUNC(SECOND, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          datetrunc: {bsonType: date}
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          datepart: {bsonType: int}
          datediff: {bsonType: long}
          dateadd: {bsonType: date}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: MILLISECOND correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(MILLISECOND, interval,
    date1), 'datepart': EXTRACT(MILLISECOND FROM date1), 'datediff': DATEDIFF(MILLISECOND,
    date1, date2), 'datetrunc': DATETRUNC(MILLISECOND, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          datepart: {bsonType: int}
          dateadd: {bsonType: date}
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          datediff: {bsonType: long}
          datetrunc: {bsonType: date}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: QUARTER correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(QUARTER, interval,
    date1), 'datediff': DATEDIFF(QUARTER, date1, date2), 'datetrunc': DATETRUNC(QUARTER,
    date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          dateadd: {bsonType: date}
          datetrunc: {bsonType: date}
          datediff: {bsonType: long}
        required: [dateadd, datediff, datetrunc, interval]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: WEEK correctness tests
  current_db: foo
  query: "SELECT VALUE {'interval': interval, 'dateadd': DATEADD(WEEK, interval, date1),
    'datepart': EXTRACT(WEEK FROM date1), 'datediff': DATEDIFF(WEEK, date1, date2),
    'datetrunc': DATETRUNC(WEEK, date1)} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          interval:
            anyOf:
            - {bsonType: int}
            - {bsonType: long}
          dateadd: {bsonType: date}
          datediff: {bsonType: long}
          datepart: {bsonType: int}
          datetrunc: {bsonType: date}
        required: [dateadd, datediff, datepart, datetrunc, interval]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: DAY_OF_YEAR correctness tests
  current_db: foo
  query: "SELECT VALUE {'datepart': EXTRACT(DAY_OF_YEAR FROM date1)} FROM datepart
    AS d"
  result:
  - {'': {datepart: {$numberInt: '153'}}}

- description: ISO_WEEK correctness tests
  current_db: foo
  query: "SELECT VALUE {'datepart': EXTRACT(ISO_WEEK FROM date1)} FROM datepart AS
    d"
  result:
  - {'': {datepart: {$numberInt: '22'}}}

- description: ISO_WEEKDAY correctness tests
  current_db: foo
  query: "SELECT VALUE {'datepart': EXTRACT(ISO_WEEKDAY FROM date1)} FROM datepart
    AS d"
  result:
  - {'': {datepart: {$numberInt: '4'}}}

- description: DAYOFWEEK correctness tests
  current_db: foo
  query: "SELECT VALUE {'datepart': EXTRACT(DAYOFWEEK FROM date1)} FROM datepart AS
    d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          datepart: {bsonType: int}
        required: [datepart]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: DATEDIFF startOfWeek correctness tests
  current_db: foo
  query: "SELECT VALUE {'sunday': DATEDIFF(WEEK, date1, date2, 'sunday'), 'friday':
    DATEDIFF(WEEK, date1, date2, 'friday')} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          friday: {bsonType: long}
          sunday: {bsonType: long}
        required: [friday, sunday]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: TIMESTAMPDIFF startOfWeek correctness tests
  current_db: foo
  query: "SELECT VALUE {'sunday': TIMESTAMPDIFF(WEEK, date1, date2, 'sunday'), 'friday':
    TIMESTAMPDIFF(WEEK, date1, date2, 'friday')} FROM dates AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          sunday: {bsonType: long}
          friday: {bsonType: long}
        required: [friday, sunday]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: DATETRUNC startOfWeek correctness tests
  current_db: foo
  query: "SELECT VALUE {'sunday': DATETRUNC(WEEK, date1, 'sunday'), 'friday': DATETRUNC(WEEK,
    date1, 'friday')} FROM datepart AS d"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          friday: {bsonType: date}
          sunday: {bsonType: date}
        required: [friday, sunday]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: TIMESTAMPTRUNC startOfWeek correctness tests
  current_db: foo
  query: "SELECT VALUE {'sunday': TIMESTAMPTRUNC(WEEK, date1, 'sunday'), 'friday':
    TIMESTAMPTRUNC(WEEK, date1, 'friday')} FROM datepart AS d"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          friday: {bsonType: date}
          sunday: {bsonType: date}
        required: [friday, sunday]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
