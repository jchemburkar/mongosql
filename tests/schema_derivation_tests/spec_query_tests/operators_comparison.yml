%YAML 1.2
---
catalog_schema: {foo: {numbers: {bsonType: object, required: [_id, a, b], additionalProperties: false,
      properties: {_id: {bsonType: int}, a: {anyOf: [bsonType: int, bsonType: long,
            bsonType: double, bsonType: decimal, bsonType: !!str "null"]}, b: {anyOf: [
            bsonType: int, bsonType: long, bsonType: double, bsonType: decimal, bsonType: !!str "null"]}}},
    nan: {bsonType: object, required: [_id, a, b], additionalProperties: false, properties: {
        _id: {bsonType: int}, a: {bsonType: decimal}, b: {bsonType: decimal}}}, strings: {
      bsonType: object, required: [_id, a, b], additionalProperties: false, properties: {
        _id: {bsonType: int}, a: {anyOf: [bsonType: string, bsonType: !!str "null"]},
        b: {anyOf: [bsonType: string, bsonType: !!str "null"]}}}, bools: {bsonType: object,
      required: [_id, a, b], additionalProperties: false, properties: {_id: {bsonType: int},
        a: {anyOf: [bsonType: bool, bsonType: !!str "null"]}, b: {anyOf: [bsonType: bool,
            bsonType: !!str "null"]}}}, dates: {bsonType: object, required: [_id,
        a, b], additionalProperties: false, properties: {_id: {bsonType: int}, a: {
          anyOf: [bsonType: date, bsonType: !!str "null"]}, b: {anyOf: [bsonType: date,
            bsonType: !!str "null"]}}}, nullAndMissing: {bsonType: object, required: [
        _id, a, b], additionalProperties: false, properties: {_id: {bsonType: int},
        a: {bsonType: !!str "null"}, b: {bsonType: !!str "null"}}}, documents: {bsonType: object,
      required: [_id, comment], additionalProperties: false, properties: {_id: {bsonType: int},
        comment: {bsonType: string}, a: {anyOf: [bsonType: !!str "null", {bsonType: object,
              additionalProperties: true}]}, b: {anyOf: [bsonType: !!str "null", {
              bsonType: object, additionalProperties: true}]}}}, arrays: {bsonType: object,
      required: [_id, comment], additionalProperties: false, properties: {_id: {bsonType: int},
        comment: {bsonType: string}, a: {anyOf: [bsonType: !!str "null", {bsonType: array,
              items: {bsonType: int}}]}, b: {anyOf: [bsonType: !!str "null", {bsonType: array,
              items: {bsonType: int}}]}}}, betweenNumeric: {bsonType: object, required: [
        _id, a, b, c], additionalProperties: false, properties: {_id: {bsonType: int},
        a: {anyOf: [bsonType: int, bsonType: long, bsonType: double, bsonType: decimal,
            bsonType: !!str "null"]}, b: {anyOf: [bsonType: int, bsonType: long, 
              bsonType: double, bsonType: decimal, bsonType: !!str "null"]}, c: {
          anyOf: [bsonType: int, bsonType: long, bsonType: double, bsonType: decimal,
            bsonType: !!str "null"]}}}, betweenStrings: {bsonType: object, required: [
        _id, a, b, c], additionalProperties: false, properties: {_id: {bsonType: int},
        a: {anyOf: [bsonType: string, bsonType: !!str "null"]}, b: {anyOf: [bsonType: string,
            bsonType: !!str "null"]}, c: {anyOf: [bsonType: string, bsonType: !!str "null"]}}},
    betweenDates: {bsonType: object, required: [_id, a, b, c], additionalProperties: false,
      properties: {_id: {bsonType: int}, a: {anyOf: [bsonType: date, bsonType: !!str "null"]},
        b: {anyOf: [bsonType: date, bsonType: !!str "null"]}, c: {anyOf: [bsonType: date,
            bsonType: !!str "null"]}}}, betweenDocuments: {bsonType: object, required: [
        _id, comment], additionalProperties: false, properties: {_id: {bsonType: int},
        comment: {bsonType: string}, a: {anyOf: [bsonType: !!str "null", {bsonType: object,
              additionalProperties: true}]}, b: {anyOf: [bsonType: !!str "null", {
              bsonType: object, additionalProperties: true}]}, c: {anyOf: [bsonType: !!str "null",
            {bsonType: object, additionalProperties: true}]}}}, betweenArrays: {bsonType: object,
      required: [_id, comment], additionalProperties: false, properties: {_id: {bsonType: int},
        comment: {bsonType: string}, a: {anyOf: [bsonType: !!str "null", {bsonType: array,
              items: {bsonType: int}}]}, b: {anyOf: [bsonType: !!str "null", {bsonType: array,
              items: {bsonType: int}}]}, c: {anyOf: [bsonType: !!str "null", {bsonType: array,
              items: {bsonType: int}}]}}}}}

tests:
- description: correctness test for lt for numeric types
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b } FROM numbers AS numbers"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for numeric types
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b } FROM numbers AS numbers"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for neq for numeric types
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <> b } FROM numbers AS numbers"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for numeric types
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b } FROM numbers AS numbers"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for numeric types
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b } FROM numbers AS numbers"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for numeric types
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b } FROM numbers AS numbers"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
            - {bsonType: double}
            - {bsonType: decimal}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lt for NaN
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b } FROM nan AS nan"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c: {bsonType: bool}
          a: {bsonType: decimal}
          b: {bsonType: decimal}
        required: [a, b, c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for NaN
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b } FROM nan AS nan"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c: {bsonType: bool}
          a: {bsonType: decimal}
          b: {bsonType: decimal}
        required: [a, b, c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for NaN
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b } FROM nan AS nan"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c: {bsonType: bool}
          a: {bsonType: decimal}
          b: {bsonType: decimal}
        required: [a, b, c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for NaN
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b } FROM nan AS nan"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: decimal}
          c: {bsonType: bool}
          b: {bsonType: decimal}
        required: [a, b, c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for NaN
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b } FROM nan AS nan"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c: {bsonType: bool}
          b: {bsonType: decimal}
          a: {bsonType: decimal}
        required: [a, b, c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lt for strings
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b } FROM strings AS strings"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for strings
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b } FROM strings AS strings"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for neq for strings
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <> b } FROM strings AS strings"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for strings
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b } FROM strings AS strings"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for strings
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b } FROM strings AS strings"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for strings
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b } FROM strings AS strings"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lt for bools
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b } FROM bools AS bools"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for bools
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b } FROM bools AS bools"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for neq for bools
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <> b } FROM bools AS bools"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for bools
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b } FROM bools AS bools"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for bools
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b } FROM bools AS bools"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for bools
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b } FROM bools AS bools"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lt for dates
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b } FROM dates AS dates"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for dates
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b } FROM dates AS dates"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for neq for dates
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <> b } FROM dates AS dates"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for dates
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b } FROM dates AS dates"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for dates
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b } FROM dates AS dates"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for dates
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b } FROM dates AS dates"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lt for null and missing
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b } FROM nullAndMissing AS nullAndMissing"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          b: {bsonType: 'null'}
          a: {bsonType: 'null'}
          c: {bsonType: 'null'}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for null and missing
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b } FROM nullAndMissing AS nullAndMissing"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a: {bsonType: 'null'}
          b: {bsonType: 'null'}
          c: {bsonType: 'null'}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for neq for null and missing
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <> b } FROM nullAndMissing AS nullAndMissing"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b: {bsonType: 'null'}
          a: {bsonType: 'null'}
          c: {bsonType: 'null'}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for null and missing
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b } FROM nullAndMissing AS nullAndMissing"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c: {bsonType: 'null'}
          a: {bsonType: 'null'}
          b: {bsonType: 'null'}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for null and missing
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b } FROM nullAndMissing AS nullAndMissing"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          b: {bsonType: 'null'}
          c: {bsonType: 'null'}
          a: {bsonType: 'null'}
        required: [c]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for null and missing
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b } FROM nullAndMissing AS nullAndMissing"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c: {bsonType: 'null'}
          b: {bsonType: 'null'}
          a: {bsonType: 'null'}
        required: [c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lt for documents
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b, 'comment': comment } FROM documents
    AS documents"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          comment: {bsonType: string}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                x: {bsonType: int}
                y: {bsonType: string}
                z: {bsonType: bool}
              additionalProperties: false
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                y: {bsonType: string}
                m: {bsonType: string}
                x: {bsonType: int}
                n: {bsonType: int}
              additionalProperties: false
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c, comment]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for documents
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b, 'comment': comment } FROM documents
    AS documents"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                y: {bsonType: string}
                n: {bsonType: int}
                m: {bsonType: string}
                x: {bsonType: int}
              additionalProperties: false
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          comment: {bsonType: string}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                z: {bsonType: bool}
                y: {bsonType: string}
                x: {bsonType: int}
              additionalProperties: false
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for neq for documents
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <> b, 'comment': comment } FROM documents
    AS documents"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                n: {bsonType: int}
                m: {bsonType: string}
                y: {bsonType: string}
                x: {bsonType: int}
              additionalProperties: false
          comment: {bsonType: string}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                z: {bsonType: bool}
                x: {bsonType: int}
                y: {bsonType: string}
              additionalProperties: false
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for documents
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b, 'comment': comment } FROM documents
    AS documents"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                z: {bsonType: bool}
                x: {bsonType: int}
                y: {bsonType: string}
              additionalProperties: false
            - bsonType: object
              properties:
                x: {bsonType: int}
                y: {bsonType: string}
                z: {bsonType: bool}
              required: [x, y]
              additionalProperties: false
          comment: {bsonType: string}
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                m: {bsonType: string}
                y: {bsonType: string}
                x: {bsonType: int}
                n: {bsonType: int}
              additionalProperties: false
        required: [c, comment]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for documents
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b, 'comment': comment } FROM documents
    AS documents"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          comment: {bsonType: string}
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                n: {bsonType: int}
                y: {bsonType: string}
                x: {bsonType: int}
                m: {bsonType: string}
              additionalProperties: false
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                z: {bsonType: bool}
                x: {bsonType: int}
                y: {bsonType: string}
              additionalProperties: false
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [c, comment]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for documents
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b, 'comment': comment } FROM documents
    AS documents"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                z: {bsonType: bool}
                y: {bsonType: string}
                x: {bsonType: int}
              additionalProperties: false
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                m: {bsonType: string}
                x: {bsonType: int}
                y: {bsonType: string}
                n: {bsonType: int}
              additionalProperties: false
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          comment: {bsonType: string}
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lt for arrays
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a < b, 'comment': comment } FROM arrays
    AS arrays"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          comment: {bsonType: string}
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for lte for arrays
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <= b, 'comment': comment } FROM arrays
    AS arrays"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          comment: {bsonType: string}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: array}
            - bsonType: array
              items: {bsonType: int}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: array}
            - bsonType: array
              items: {bsonType: int}
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for neq for arrays
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a <> b, 'comment': comment } FROM arrays
    AS arrays"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          comment: {bsonType: string}
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for eq for arrays
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a = b, 'comment': comment } FROM arrays
    AS arrays"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: array}
            - bsonType: array
              items: {bsonType: int}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: array}
            - bsonType: array
              items: {bsonType: int}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          comment: {bsonType: string}
        required: [c, comment]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gt for arrays
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a > b, 'comment': comment } FROM arrays
    AS arrays"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          comment: {bsonType: string}
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for gte for arrays
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': a >= b, 'comment': comment } FROM arrays
    AS arrays"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          comment: {bsonType: string}
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
        required: [c, comment]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for BETWEEN for numeric types
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': c, 'r': a BETWEEN b AND c } FROM betweenNumeric
    AS betweenNumeric"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: double}
            - {bsonType: decimal}
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: int}
            - {bsonType: long}
          r:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [r]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for BETWEEN for strings
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': c, 'r': a BETWEEN b AND c } FROM betweenStrings
    AS betweenStrings"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
          r:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: string}
        required: [r]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for BETWEEN for dates
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': c, 'r': a BETWEEN b AND c } FROM betweenDates
    AS betweenDates"
  result_set_schema:
    bsonType: object
    properties:
      '':
        bsonType: object
        properties:
          a:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          c:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          b:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: date}
          r:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
        required: [r]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: ['', _id]
    additionalProperties: false
- description: correctness test for BETWEEN for documents
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': c, 'r': a BETWEEN b AND c, 'comment':
    comment } FROM betweenDocuments AS betweenDocuments"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          c:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                z: {bsonType: int}
                n: {bsonType: int}
              required: [z]
              additionalProperties: false
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties:
                x: {bsonType: int}
                y: {bsonType: int}
              required: [x]
              additionalProperties: false
          comment: {bsonType: string}
          r:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: object
              properties: {}
              additionalProperties: true
            - bsonType: object
              properties:
                y: {bsonType: int}
                x: {bsonType: int}
                n: {bsonType: int}
                z: {bsonType: int}
              additionalProperties: false
        required: [comment, r]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
- description: correctness test for BETWEEN for arrays
  current_db: foo
  query: "SELECT VALUE { 'a': a, 'b': b, 'c': c, 'r': a BETWEEN b AND c, 'comment':
    comment } FROM betweenArrays AS betweenArrays"
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      '':
        bsonType: object
        properties:
          b:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          c:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          r:
            anyOf:
            - {bsonType: 'null'}
            - {bsonType: bool}
          a:
            anyOf:
            - {bsonType: 'null'}
            - bsonType: array
              items: {bsonType: int}
          comment: {bsonType: string}
        required: [comment, r]
        additionalProperties: false
    required: ['', _id]
    additionalProperties: false
