%YAML 1.2
---
catalog_schema: {mydb: {foo: {bsonType: object, required: [_id, a], additionalProperties: false,
      properties: {_id: {bsonType: int}, a: {bsonType: object, required: [b], additionalProperties: false,
          properties: {b: {bsonType: object, required: [c], additionalProperties: false,
              properties: {c: {bsonType: int}}}}}}}, docOrInt: {bsonType: object,
      required: [_id, a], additionalProperties: false, properties: {_id: {bsonType: int},
        a: {anyOf: [bsonType: int, {bsonType: object, required: [b], additionalProperties: false,
              properties: {b: {bsonType: int}}}]}}}, nullableDoc: {bsonType: object,
      required: [_id], additionalProperties: false, properties: {_id: {bsonType: int},
        a: {anyOf: [bsonType: 'null', {bsonType: object, required: [b], additionalProperties: false,
              properties: {b: {bsonType: int}}}]}}}, mustCollide: {bsonType: object,
      required: [_id, a], additionalProperties: false, properties: {_id: {bsonType: int},
        a: {bsonType: object, required: [b], additionalProperties: false, properties: {
            b: {bsonType: int}}}, a_b: {bsonType: int}}}, mayCollide: {bsonType: object,
      required: [_id, a], additionalProperties: true, properties: {_id: {bsonType: int},
        a: {bsonType: object, required: [b], additionalProperties: false, properties: {
            b: {bsonType: int}}}}}, noSchemaInfo: {bsonType: object, additionalProperties: true}}}

tests:
- description: basic correctness test
  current_db: mydb
  query: SELECT * FROM FLATTEN(foo)
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      foo:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a_b_c: {bsonType: int}
        required: [_id, a_b_c]
        additionalProperties: false
    required: [_id, foo]
    additionalProperties: false
- description: datasource argument can optionally include an alias
  current_db: mydb
  query: SELECT * FROM FLATTEN(foo as f)
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      f:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a_b_c: {bsonType: int}
        required: [_id, a_b_c]
        additionalProperties: false
    required: [_id, f]
    additionalProperties: false
- description: basic correctness test for user-specified separator
  current_db: mydb
  query: "SELECT * FROM FLATTEN(foo WITH separator => ':') "
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a:b:c: {bsonType: int}
        required: [_id, a:b:c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, foo]
    additionalProperties: false
- description: user-specified separator with length less than one is allowed
  current_db: mydb
  query: "SELECT * FROM FLATTEN(foo WITH separator => '') "
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      foo:
        bsonType: object
        properties:
          _id: {bsonType: int}
          abc: {bsonType: int}
        required: [_id, abc]
        additionalProperties: false
    required: [_id, foo]
    additionalProperties: false
- description: user-specified separator with length greater than one is allowed
  current_db: mydb
  query: "SELECT * FROM FLATTEN(foo WITH separator => '_DOT_') "
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          a_DOT_b_DOT_c: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a_DOT_b_DOT_c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, foo]
    additionalProperties: false
- description: a user-specified depth greater than max nesting depth causes all documents
    to be flattened
  current_db: mydb
  query: SELECT * FROM FLATTEN(foo WITH depth => 5)
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          a_b_c: {bsonType: int}
          _id: {bsonType: int}
        required: [_id, a_b_c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, foo]
    additionalProperties: false
- description: a user-specified depth less than max nesting depth causes more deeply
    nested documents to remain unflattened
  current_db: mydb
  query: SELECT * FROM FLATTEN(foo WITH depth => 1)
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a_b:
            bsonType: object
            properties:
              c: {bsonType: int}
            required: [c]
            additionalProperties: false
        required: [_id, a_b]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, foo]
    additionalProperties: false
- description: flatten polymorphic objects with just null or missing polymorphism
  current_db: mydb
  query: SELECT * FROM FLATTEN(nullableDoc)
  result_set_schema:
    bsonType: object
    properties:
      _id: {bsonType: objectId}
      nullableDoc:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a_b: {bsonType: int}
        required: [_id]
        additionalProperties: false
    required: [_id, nullableDoc]
    additionalProperties: false
- description: FLATTENing a FLATTENed datasource is allowed
  current_db: mydb
  query: SELECT * FROM FLATTEN(FLATTEN(foo))
  result_set_schema:
    bsonType: object
    properties:
      foo:
        bsonType: object
        properties:
          _id: {bsonType: int}
          a_b_c: {bsonType: int}
        required: [_id, a_b_c]
        additionalProperties: false
      _id: {bsonType: objectId}
    required: [_id, foo]
    additionalProperties: false
